{"version":3,"sources":["utils/duration/index.js","pomodoro/BreakComponent.js","pomodoro/FocusComponent.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["secondsToDuration","givenSeconds","minutes","Math","floor","toString","padStart","seconds","round","BreakComponent","breakDuration","timeRemaining","className","data-testid","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","FocusComponent","focusDuration","Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","setFocusDuration","setBreakDuration","setTimeRemaining","onBreak","setOnBreak","showInfo","setShowInfo","sound","Audio","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","play","onClick","disabled","type","handleBreakTimeSub","handleBreakTimeAdd","aria-label","title","prevState","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","infoComponent","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e0a0b156.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  if (givenSeconds === 3600) return `60:00`;\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction BreakComponent({ breakDuration, timeRemaining }) {\r\n    return (\r\n        <div>\r\n          <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n              <h2 data-testid=\"session-title\">\r\n                On Break for {secondsToDuration(breakDuration)} minutes\r\n              </h2>\r\n              <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                {secondsToDuration(timeRemaining)} remaining\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row mb-2\">\r\n            <div className=\"col\">\r\n              <div className=\"progress\" style={{ height: \"20px\" }}>\r\n                <div\r\n                  className=\"progress-bar\"\r\n                  role=\"progressbar\"\r\n                  aria-valuemin=\"0\"\r\n                  aria-valuemax=\"100\"\r\n                  aria-valuenow={(100 - (timeRemaining / breakDuration) * 100)}\r\n                  style={{ width: `${(100 - (timeRemaining / breakDuration) * 100)}%` }} \r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default BreakComponent;","import React from \"react\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction FocusComponent({ timeRemaining, focusDuration }) {\r\n  return (\r\n    <div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <h2 data-testid=\"session-title\">\r\n            Focusing for {secondsToDuration(focusDuration)} minutes\r\n          </h2>\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(timeRemaining)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={100 - (timeRemaining / focusDuration) * 100}\r\n              style={{\r\n                width: `${100 - (timeRemaining / focusDuration) * 100}%`,\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FocusComponent;\r\n","// Pomodoro.js\n\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport BreakComponent from \"./BreakComponent\";\nimport FocusComponent from \"./FocusComponent\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(1500);\n  const [breakDuration, setBreakDuration] = useState(300);\n  const [timeRemaining, setTimeRemaining] = useState(focusDuration);\n  const [onBreak, setOnBreak] = useState(false);\n  const [showInfo, setShowInfo] = useState(false);\n  const sound = new Audio(`./public/alarm/submarine-dive-horn.mp3`);\n\n  useInterval(\n    () => {\n      setTimeRemaining((timeRemaining) => timeRemaining - 1);\n      play();\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n    setShowInfo(true);\n    sound.play();\n  }\n\n  // Handle PLAY\n  function play() {\n    if (timeRemaining === 0) {\n      sound.play();\n      if (onBreak) {\n        setTimeRemaining((timeRemaining) => timeRemaining + focusDuration);\n        setOnBreak(false);\n      }\n      if (!onBreak) {\n        setTimeRemaining((timeRemaining) => timeRemaining + breakDuration);\n        setOnBreak(true);\n      }\n    }\n  }\n\n  // Handle the STOP button\n  const handleStopBtn = () => {\n    setIsTimerRunning(false);\n    setFocusDuration(1500);\n    setBreakDuration(300);\n    setTimeRemaining(1500);\n    setShowInfo(false);\n  };\n\n  // Handle the focus duration view SUBTRACT\n  const handleFocusTimeSub = () => {\n    if (focusDuration > 300) {\n      setFocusDuration((focusDuration) => focusDuration - 300);\n      if (!onBreak) setTimeRemaining((timeRemaining) => timeRemaining - 300);\n    } else {\n      setFocusDuration((focusDuration) => focusDuration);\n    }\n  };\n\n  // Handle the focus duration view ADD\n  const handleFocusTimeAdd = () => {\n    if (focusDuration < 3600) {\n      setFocusDuration((focusDuration) => focusDuration + 300);\n      if (!onBreak) setTimeRemaining((timeRemaining) => timeRemaining + 300);\n    } else {\n      setFocusDuration((focusDuration) => focusDuration);\n    }\n  };\n\n  // Handle the break duration view SUBTRACT\n  const handleBreakTimeSub = (breakDuration) => {\n    if (breakDuration > 60) {\n      setBreakDuration((breakDuration) => breakDuration - 60);\n      if (onBreak) setTimeRemaining((timeRemaining) => timeRemaining - 60);\n    } else {\n      setBreakDuration((breakDuration) => breakDuration);\n    }\n  };\n\n  // Handle the break duration view ADD\n  const handleBreakTimeAdd = (breakDuration) => {\n    if (breakDuration < 900) {\n      setBreakDuration((breakDuration) => breakDuration + 60);\n      if (onBreak) setTimeRemaining((timeRemaining) => timeRemaining + 60);\n    } else {\n      setBreakDuration((breakDuration) => breakDuration);\n    }\n  };\n\n  // Handle the infoComponent\n  const infoComponent = () => {\n    if (showInfo) {\n      if (onBreak) {\n        return (\n          <BreakComponent\n            breakDuration={breakDuration}\n            timeRemaining={timeRemaining}\n          />\n        );\n      }\n      if (!onBreak) {\n        return (\n          <FocusComponent\n            focusDuration={focusDuration}\n            timeRemaining={timeRemaining}\n          />\n        );\n      }\n      return null;\n    }\n  };\n\n  // Return Pomodoro\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              Focus Duration: {secondsToDuration(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              <button\n                onClick={() => {\n                  handleFocusTimeSub(focusDuration);\n                }}\n                disabled={isTimerRunning}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n              >\n                <span className=\"oi oi-minus\" />\n              </button>\n\n              <button\n                onClick={() => {\n                  handleFocusTimeAdd(focusDuration);\n                }}\n                disabled={isTimerRunning}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n              >\n                <span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                Break Duration: {secondsToDuration(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                <button\n                  onClick={() => handleBreakTimeSub(breakDuration)}\n                  disabled={isTimerRunning}\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                >\n                  <span className=\"oi oi-minus\" />\n                </button>\n                <button\n                  onClick={() => handleBreakTimeAdd(breakDuration)}\n                  disabled={isTimerRunning}\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                >\n                  <span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            <button\n              onClick={handleStopBtn}\n              disabled={!isTimerRunning}\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>{infoComponent()}</div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}