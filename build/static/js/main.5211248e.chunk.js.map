{"version":3,"sources":["pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["Pomodoro","classNameToBoolean","useState","isTimerRunning","setIsTimerRunning","focusDuration","setFocusDuration","breakDuration","setBreakDuration","timeRemaining","setTimeRemaining","convertTime","duration","getMinutes","array","toFixed","toString","split","minutes","seconds","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","className","data-testid","onClick","type","role","aria-label","title","prevState","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5211248e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [focusDuration, setFocusDuration] = useState(1500000);\n  const [breakDuration, setBreakDuration] = useState(300000);\n  const [timeRemaining, setTimeRemaining] = useState(focusDuration);\n\n\n  \n  // Convert milliseconds to mm:ss format\n  function convertTime (duration) {\n    let time = duration;\n    let getMinutes = time / 60000;\n    getMinutes = getMinutes.toFixed(2);\n    let string = getMinutes.toString();\n    let array = string.split('.');\n    let minutes = array[0];\n    let seconds = array[1];\n    if (!seconds) seconds = '00';\n    if (minutes < 10) minutes = `0${minutes}`;\n    return `${minutes}:${seconds}`;\n  }\n\n  useInterval(\n    () => {\n      setTimeRemaining(timeRemaining => timeRemaining - 1000);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n              Focus Duration: {convertTime(focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n              <button\n                onClick={() => setFocusDuration(focusDuration => focusDuration - 300000)}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-focus\"\n              >\n                -<span className=\"oi oi-minus\" />\n              </button>\n              \n              <button\n              onClick={() => setFocusDuration(focusDuration => focusDuration + 300000)}\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-focus\"\n              >\n                +<span className=\"oi oi-plus\" />\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                Break Duration: {convertTime(breakDuration)}\n              </span>\n              <div className=\"input-group-append\">\n                <button\n                  onClick={() => setBreakDuration(breakDuration => breakDuration - 60000)}\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                >\n                  -<span className=\"oi oi-minus\" />\n                </button>\n                <button\n                  onClick={() => setBreakDuration(breakDuration => breakDuration + 60000)}\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"increase-break\"\n                >\n                  +<span className=\"oi oi-plus\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              Play<span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              title=\"Stop the session\"\n            >\n              Stop<span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">Focusing for 25:00 minutes</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {convertTime(timeRemaining)} remaining\n            </p>\n          </div>\n        </div>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            <div className=\"progress\" style={{ height: \"20px\" }}>\n              <div\n                className=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n                aria-valuenow=\"0\" // TODO: Increase aria-valuenow as elapsed time increases\n                style={{ width: \"0%\" }} // TODO: Increase width % as elapsed time increases\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}